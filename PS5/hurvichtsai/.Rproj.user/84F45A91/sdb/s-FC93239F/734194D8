{
    "collab_server" : "",
    "contents" : "\n#' Generate a random sample of an VAR(p) m-variate time series.\n#'\n#' @param Phi Transition Matrix\n#' @param Sigma Covariance of error terms\n#' @param p Order of VAR(p)\n#' @param m Number of dimensions\n#' @param n Number of observations\n#' @param NumLags Number of pre-data obs set to zero.\n#'\n#' @return mx(n+NumLags) matrix\n#' @export\n#'\n#' @examples\nsample_data <- function(Phi,Sigma,p,m,n,NumLags) {\n\n  epsilon <- MASS::mvrnorm(n+NumLags+1,mu=rep(0,m),Sigma=Sigma)\n  data    <- matrix(0,n+NumLags+1,2)\n\n  for(t in (NumLags+1):(n+NumLags+1)) {\n\n    data[t,] <- epsilon[t,]\n    order    <- 1\n\n    while(order <= p) {\n      data[t,] <- data[t,]+matrix(c(data[t-order,]),1,2)%*%Phi[[order]]\n      order    <- order+1\n    }\n\n  }\n\n  return(data)\n\n}\n\n#' Negative log-likelihood\n#'\n#' @param param Vector of parameters\n#' @param Y m-variate time series\n#' @param X lagged matrix of order (p). Does not include constant.\n#' @param p Order of VAR(p)\n#' @param m Dimension of time series\n#'\n#' @return Negative log-likelihood up to a constant\n#' @export\n#'\n#' @examples\nlik_VAR <- function(param,Y,X,p,m,n) {\n\n  coeff <- get_parameters(param,p,m)\n  beta  <- coeff$beta\n  Sigma <- coeff$Sigma\n  lik   <- n*log(det(Sigma))+\n           psych::tr((Y-X%*%beta)%*%solve(Sigma)%*%t(Y-X%*%beta))\n\n  return(lik)\n\n}\n\n\n#' Obtain maximum likelihood estimate\n#'\n#' @param data mx(n+NumLags) matrix\n#' @param m Number of dimensions of time series\n#' @param p Order of VAR(p)\n#' @param NumLags Maximum number of lags set to zero in pre-data observations.\n#'\n#' @return\n#' @export\n#'\n#' @examples\nmle_VAR <- function(data,m,p,n,NumLags) {\n\n  Y <- data[(NumLags+1):(n+NumLags),]\n  X <- get_regressorMat(data,NumLags+1,n,p)\n\n  init_guess <- get_param_vec(beta = matrix(0,m^2,p),\n                              Sigma = diag(m) )\n\n  model     <- optim(par=init_guess, fn=function(par) {lik_VAR(par,Y,X,p,m,n)})\n  est_coef  <- model$par\n\n  # model     <- nlminb(start=init_guess,\n  #                    objective=function(par) {lik_VAR(par,Y,X,p,m,n)})\n  # est_coef  <- model$par\n  param     <- get_parameters(est_coef,p,m)\n\n  return(param)\n\n}\n\n#' Construct stacked regressor matrix of lags of order p\n#'\n#' @param Z  Original time series\n#' @param n0 Initial observation\n#' @param n  Number of observations\n#' @param p  Order of VAR(p)\n#'\n#' @return\n#' @export\n#'\n#' @examples\nget_regressorMat <- function(Z,n0,n,p) {\n\n  if(p == 1) {\n    X <- Z[(n0-1):((n0-1)+(n-1)),]\n\n  } else if (p >= 1) {\n\n    X <- Z[(n0-1):((n0-1)+(n-1)),]\n\n    for( j in 2:p) {\n      X <- cbind(X,Z[(n0-j):((n0-j)+(n-1)),])\n    }\n  }\n\n  return(X)\n\n}\n\n#' Convert a vector of parameters into beta and Sigma matrices\n#'\n#' @param param First $p*(m^2)$ parameters are beta. The rest\n#' are Sigma. The parameters are the cells of the Cholesky decomposition.-\n#' @param p Order of VAR(p)\n#' @param m Number of dimensions of time series\n#'\n#' @return\n#' @export\n#'\n#' @examples\nget_parameters <- function(param,p,m) {\n\n  beta      <- matrix(param[1:(p*(m^2))],m*p,m)\n  cholSigma <- matrix(0,m,m)\n  cholSigma[lower.tri(cholSigma,diag=TRUE)] <-  param[(p*(m^2)+1):length(param)]\n  Sigma     <- cholSigma%*%t(cholSigma )\n\n  return(list(beta = beta,Sigma=Sigma))\n\n}\n\n#' Convert beta and Sigma matrices into a vector of parameters\n#'\n#' @param beta  Stacked matrix of transition matrices (Phi)\n#' @param Sigma Covariance matrix of error terms\n#'\n#' @return Vector of parameters. The cells for Sigma correspond to the Cholesky\n#' decomposition.\n#' @export\n#'\n#' @examples\nget_param_vec <- function(beta,Sigma) {\n\n  Sigma <- Sigma\n  cholSigma <- t(chol(Sigma))\n  cholSigma <- cholSigma[lower.tri(cholSigma,diag=TRUE)]\n\n  return(c(as.vector(beta),cholSigma))\n\n}\n",
    "created" : 1489973852015.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "648333758",
    "id" : "734194D8",
    "lastKnownWriteTime" : 1489980058,
    "last_content_update" : 1489980093686,
    "path" : "~/GITHUB_FOLDERS/Econometrics-IV/PS5/hurvichtsai/R/helper_functions.R",
    "project_path" : "R/helper_functions.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}