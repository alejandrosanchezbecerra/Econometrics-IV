devtools::load_all(".")
do.call(replicate_results,example1())
Phi0 <- example1()$Phi0
Sigma0 <- example1()$Sigma0
m <- example1()$m
n <- example1()$n
p <- example1()$p
p0 <- example1()$p0
NumLags <- example1()$NumLags
data <- sample_data(Phi=Phi0,Sigma=Sigma0,p=p0,m=m,n=n,NumLags=NumLags)
p
example1()$p
Y <- data[(NumLags+1):(n+NumLags),]
X <- get_regressorMat(data,NumLags+1,n,p)
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+2):(n+NumLags+1),]),
p = p,type="none")
beta_guess <- cbind(model$varresult$V1$coefficients,
model$varresult$V2$coefficients)
Sigma_guess <- summary(model_VAR)$covres
init_guess <- get_param_vec(beta = beta_guess,Sigma = Sigma_guess )
model     <- optim(par=init_guess,
fn=function(par) {lik_VAR(par,Y,X,p,m,n)},
method="L-BFGS-B")
init_guess
p
lik_VAR(init_guess,Y,X,p,m,n)
beta_guess
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+2):(n+NumLags+1),]),
p = p,type="none")
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+2):(n+NumLags+1),]),
p = p,type="none")
beta_guess <- cbind(model_VAR$varresult$V1$coefficients,
model_VAR$varresult$V2$coefficients)
Sigma_guess <- summary(model_VAR)$covres
init_guess <- get_param_vec(beta = beta_guess,Sigma = Sigma_guess )
init_guess
do.call(replicate_results,example1())
do.call(replicate_results,example1())
example1()
devtools::load_all(".")
do.call(replicate_results,example1())
Phi0 <- example1()$Phi0
Sigma0 <- example1()$Sigma0
m <- example1()$m
n <- example1()$n
p0 <- example1()$p0
NumLags <- example1()$NumLags
data <- sample_data(Phi=Phi0,Sigma=Sigma0,p=p0,m=m,n=n,NumLags=NumLags)
Y <- data[(NumLags+1):(n+NumLags),]
X <- get_regressorMat(data,NumLags+1,n,p)
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+2):(n+NumLags+1),]),
p = p,type="none")
model_VAR
p
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+2):(n+NumLags+1),]),
p = p,type="none")
model_VAR
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+1):(n+NumLags),]),
p = p,type="none")
model_VAR
beta_guess <- cbind(model_VAR$varresult$V1$coefficients,
model_VAR$varresult$V2$coefficients)
beta_guess
Phi0 <- example1()$Phi0
Sigma0 <- example1()$Sigma0
m <- example1()$m
n <- example1()$n
p0 <- example1()$p0
NumLags <- example1()$NumLags
data <- sample_data(Phi=Phi0,Sigma=Sigma0,p=p0,m=m,n=n,NumLags=NumLags)
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+1):(n+NumLags),]),
p = p,type="none")
model_VAR
SVAR(model_VAR,estmethod="direct",Amat=diag(2))
library('vars')
SVAR(model_VAR,estmethod="direct",Amat=diag(2))
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+1):(n+NumLags),]),
p = p,type="none")
SVAR(model_VAR,estmethod="direct",Amat=diag(2))
SVAR(model_VAR,estmethod="direct",Amat=diag(2),Bmat=matrix(NA,2,2))
Bmat <- matrix(0,2,2)
Bmat[lower.tri(Bmat,diag=TRUE)] <- NA
Bmat
SVAR(model_VAR,estmethod="direct",Amat=diag(2),Bmat=Bmat)
Sigma_guess <- summary(model_VAR)$covres
Sigma_guess
SVAR(model_VAR,estmethod="direct",Amat=diag(2),Bmat=Bmat)
Bmat <- matrix(0,2,2)
Bmat[lower.tri(Bmat,diag=TRUE)] <- NA
chol_VAR <- SVAR(model_VAR,estmethod="direct",Amat=diag(2),Bmat=Bmat)
chol_Var%*%t(chol_VAR)
Bmat <- matrix(0,2,2)
Bmat[lower.tri(Bmat,diag=TRUE)] <- NA
chol_VAR <- SVAR(model_VAR,estmethod="direct",Amat=diag(2),Bmat=Bmat)
chol_VAR%*%t(chol_VAR)
Bmat <- matrix(0,2,2)
Bmat[lower.tri(Bmat,diag=TRUE)] <- NA
chol_VAR <- SVAR(model_VAR,estmethod="direct",Amat=diag(2),Bmat=Bmat)
chol_VAR%*%t(chol_VAR)
chol_VAR
t(chol_VAR)
SVAR(model_VAR,estmethod="direct",Amat=diag(2),Bmat=Bmat)$Sigma.U
SVAR(model_VAR,estmethod="direct",Amat=diag(2),Bmat=Bmat)$Sigma.U/100
summary(model_VAR)$covres
devtools::load_all(".")
do.call(replicate_results,example1())
do.call(replicate_results,example2())
Phi0 <- example1()$Phi0
Sigma0 <- example1()$Sigma0
m <- example1()$m
n <- example1()$n
p0 <- example1()$p0
NumLags <- example1()$NumLags
data <- sample_data(Phi=Phi0,Sigma=Sigma0,p=p0,m=m,n=n,NumLags=NumLags)
Y <- data[(NumLags+1):(n+NumLags),]
X <- get_regressorMat(data,NumLags+1,n,p)
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+1):(n+NumLags),]),
p = p,type="none")
Bcoef(model_VAR)
Phi0 <- example2()$Phi0
Sigma0 <- example2()$Sigma0
m <- example2()$m
n <- example2()$n
p0 <- example2()$p0
NumLags <- example2()$NumLags
data <- sample_data(Phi=Phi0,Sigma=Sigma0,p=p0,m=m,n=n,NumLags=NumLags)
Y <- data[(NumLags+1):(n+NumLags),]
X <- get_regressorMat(data,NumLags+1,n,p)
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+1):(n+NumLags),]),
p = p,type="none")
Bcoef(model_VAR)
p
p=2
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+1):(n+NumLags),]),
p = p,type="none")
Bcoef(model_VAR)
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+1):(n+NumLags),]),
p = p,type="none")
model_VA
model_VAR
Bcoef(model_VAR)
t(Bcoef(model_VAR))
Phi0 <- example2()$Phi0
Sigma0 <- example2()$Sigma0
m <- example2()$m
n <- example2()$n
p0 <- example2()$p0
NumLags <- example2()$NumLags
data <- sample_data(Phi=Phi0,Sigma=Sigma0,p=p0,m=m,n=n,NumLags=NumLags)
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+1):(n+NumLags),]),
p = p,type="none")
t(Bcoef(model_VAR))
Y <- data[(NumLags+1):(n+NumLags),]
X <- get_regressorMat(data,NumLags+1,n,p)
lm(Y[,1]~-1+X)
get_Sigma <- function(Sigma_vec,m) {
cholSigma <- matrix(0,m,m)
cholSigma[lower.tri(cholSigma,diag=TRUE)] <-  Sigma_vec
Sigma     <- cholSigma%*%t(cholSigma )
return(Sigma)
}
get_Sigma_vec <- function(Sigma) {
Sigma <- Sigma
cholSigma <- t(chol(Sigma))
cholSigma <- cholSigma[lower.tri(cholSigma,diag=TRUE)]
return(cholSigma)
}
Y <- data[(NumLags+1):(n+NumLags),]
X <- get_regressorMat(data,NumLags+1,n,p)
# USE VAR as initial guess to speed up.
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+1):(n+NumLags),]),
p = p,type="none")
beta       <- t(Bcoef(model_VAR))
init_guess <- get_Sigma_vec(Sigma=summary(model_VAR)$covres)
model     <- optim(par=init_guess,
fn=function(Sigma) {lik_VAR(Sigma,beta,Y,X,p,m,n)},
method="L-BFGS-B")
conc_lik_VAR <- function(Sigma_vec,beta,Y,X,p,m,n) {
Sigma <- get_Sigma(Sigma_vec,m)
lik   <- n*log(det(Sigma))+
psych::tr((Y-X%*%beta)%*%solve(Sigma)%*%t(Y-X%*%beta))
return(lik)
}
model     <- optim(par=init_guess,
fn=function(Sigma) {conc_lik_VAR(Sigma,beta,Y,X,p,m,n)},
method="L-BFGS-B")
est_coef  <- model$par
est_coef
est_coef  <- model$par
Sigma     <- get_Sigma(Sigma_vec,m)
est_coef  <- model$par
Sigma     <- get_Sigma(est_coef,m)
Sigma
Bmat <- matrix(0,2,2)
Bmat <- matrix(0,2,2)
Bmat[lower.tri(Bmat,diag=TRUE)] <- NA
Sigma <- SVAR(model_VAR,estmethod="direct",Amat=diag(2),Bmat=Bmat)$Sigma.U/100
Sigma
devtools::load_all(".")
do.call(replicate_results,example1())
library('hurvitchtsai')
devtools::load_all(".")
do.call(replicate_results,example1())
do.call(replicate_results,example2())
Y <- data[(NumLags+1):(n+NumLags),]
X <- get_regressorMat(data,NumLags+1,n,p)
model_VAR  <- vars::VAR(as.data.frame(data[(NumLags-p+1):(n+NumLags),]),
p = p,type="none")
beta       <- t(Bcoef(model_VAR))
beta
init_guess <- get_param_vec(beta = matrix(0,m^2,p),
Sigma = diag(m) )
model     <- optim(par=init_guess,
fn=function(par) {lik_VAR(par,Y,X,p,m,n)},
method="L-BFGS-B")
est_coef  <- model$par
est_coef
init_guess <- get_Sigma_vec(Sigma=summary(model_VAR)$covres)
model     <- optim(par=init_guess,
fn=function(Sigma) {conc_lik_VAR(Sigma,beta,Y,X,p,m,n)},
method="L-BFGS-B")
est_coef  <- model$par
Sigma     <- get_Sigma(est_coef,m)
est_coef
init_guess <- get_Sigma_vec(Sigma=summary(model_VAR)$covres)
model     <- optim(par=init_guess,
fn=function(Sigma) {conc_lik_VAR(Sigma,beta,Y,X,p,m,n)},
method="L-BFGS-B")
est_coef  <- model$par
Sigma     <- get_Sigma(est_coef,m)
init_guess <- get_Sigma_vec(Sigma=summary(model_VAR)$covres)
model     <- optim(par=init_guess,
fn=function(Sigma) {conc_lik_VAR(Sigma,beta,Y,X,p,m,n)})
est_coef  <- model$par
Sigma     <- get_Sigma(est_coef,m)
Sigma
init_guess <- get_Sigma_vec(Sigma=summary(model_VAR)$covres)
model     <- optim(par=init_guess,
fn=function(Sigma) {conc_lik_VAR(Sigma,beta,Y,X,p,m,n)},
method="L-BFGS-B")
est_coef  <- model$par
Sigma     <- get_Sigma(est_coef,m)
Sigma
model
summary(model_VAR)$covres
get_Sigma(est_coef,m)
kron(diag(1),diag(2))
kronecker(diag(1),diag(2))
kronecker(diag(4),diag(2))
kronecker(3*diag(2),diag(2))
kronecker(3*magic(2),diag(2))
kronecker(matrix(c(2,2,2,2),2,2),diag(2))
beta0   <- Phi_to_Beta(Phi0)
estimate_Delta(beta,Sigma,beta0,Sigma0)
H <- matrix(0,m*n,m*n)
H
n:1
H[((i-1)*m+1):(i*m),((i-1)*m+1):(i*m)]
i <- n
H[((i-1)*m+1):(i*m),((i-1)*m+1):(i*m)]
i <- n-1
H[((i-1)*m+1):(n*m),((i-1)*m+1):(i*m)]
i <- 2
H[((i-1)*m+1):(n*m),((i-1)*m+1):(i*m)]
i <- n
H[((i-1)*m+1):(n*m),((i-1)*m+1):(i*m)]
stacked_Phi <- matrix(NA,0,m)
stacked_Phi
Phi[[0]] <- 1
if( i == n) {
diag(m)
} else if(i == (n-1)) {
print("hola")
}
i <- n-1
if( i == n) {
diag(m)
} else if(i == (n-1)) {
print("hola")
}
if( i == n) {
diag(m)
} else if(i == (n-1)) {
print("hola")
} else {
print("hola2")
}
i <- n-3
if( i == n) {
diag(m)
} else if(i == (n-1)) {
print("hola")
} else {
print("hola2")
}
Phi
Phi0
if( i == n) {
diag(m)
} else {
if( n-i <= p ) {
Phi0[[n-i]]
}
}
i <- n
if( i == n) {
diag(m)
} else {
if( n-i <= p ) {
Phi0[[n-i]]
}
}
i <- n-1
if( i == n) {
diag(m)
} else {
if( n-i <= p ) {
Phi0[[n-i]]
}
}
i <- n-2
if( i == n) {
diag(m)
} else {
if( n-i <= p ) {
Phi0[[n-i]]
}
}
p
H <- matrix(0,m*n,m*n)
stacked_Phi <- matrix(NA,0,m)
for(i in n:35){
if( i == n) {
stacked_Phi <- diag(m)
} else {
if( n-i <= p ) {
stacked_Phi <- rbind(stacked_Phi,Phi0[[n-i]])
} else {
stacked_Phi <- rbind(stacked_Phi,matrix(0,m,m))
}
}
stackedPhi
# H[((i-1)*m+1):(n*m),((i-1)*m+1):(i*m)]
}
H <- matrix(0,m*n,m*n)
stacked_Phi <- matrix(NA,0,m)
for(i in n:35){
if( i == n) {
stacked_Phi <- diag(m)
} else {
if( n-i <= p ) {
stacked_Phi <- rbind(stacked_Phi,Phi0[[n-i]])
} else {
stacked_Phi <- rbind(stacked_Phi,matrix(0,m,m))
}
}
stacked_Phi
# H[((i-1)*m+1):(n*m),((i-1)*m+1):(i*m)]
}
H <- matrix(0,m*n,m*n)
stacked_Phi <- matrix(NA,0,m)
for(i in n:35){
if( i == n) {
stacked_Phi <- diag(m)
} else {
if( n-i <= p ) {
stacked_Phi <- rbind(stacked_Phi,Phi0[[n-i]])
} else {
stacked_Phi <- rbind(stacked_Phi,matrix(0,m,m))
}
}
print(stacked_Phi)
# H[((i-1)*m+1):(n*m),((i-1)*m+1):(i*m)]
}
for(i in n:35){
if( i == n) {
stacked_Phi <- diag(m)
} else {
if( n-i <= p ) {
stacked_Phi <- rbind(stacked_Phi,-Phi0[[n-i]])
} else {
stacked_Phi <- rbind(stacked_Phi,matrix(0,m,m))
}
}
H[((i-1)*m+1):(n*m),((i-1)*m+1):(i*m)] <- stacked_Phi
}
H
H[50:80,50:80]
H <- matrix(0,m*n,m*n)
stacked_Phi <- matrix(NA,0,m)
for(i in n:1){
if( i == n) {
stacked_Phi <- diag(m)
} else {
if( n-i <= p ) {
stacked_Phi <- rbind(stacked_Phi,-Phi0[[n-i]])
} else {
stacked_Phi <- rbind(stacked_Phi,matrix(0,m,m))
}
}
H[((i-1)*m+1):(n*m),((i-1)*m+1):(i*m)] <- stacked_Phi
}
H[50:80,50:80]
Beta_to_Phi <- function(beta,m,p) {
Phi <- list()
order <- 1
while ( order <= p ) {
Phi[[order]] <- t(beta[(order*(m-1)+1):(order*m),1:m])
}
return(beta)
}
param   <- (mle_VAR(data,m,p,n,NumLags))
beta    <- param$beta
Sigma   <- param$Sigma
Phi0 <- example2()$Phi0
Sigma0 <- example2()$Sigma0
m <- example2()$m
n <- example2()$n
p0 <- example2()$p0
NumLags <- example2()$NumLags
data <- sample_data(Phi=Phi0,Sigma=Sigma0,p=p0,m=m,n=n,NumLags=NumLags)
devtools::load_all(".")
Phi0 <- example2()$Phi0
Sigma0 <- example2()$Sigma0
m <- example2()$m
n <- example2()$n
p0 <- example2()$p0
NumLags <- example2()$NumLags
data <- sample_data(Phi=Phi0,Sigma=Sigma0,p=p0,m=m,n=n,NumLags=NumLags)
p
param   <- (mle_VAR(data,m,p,n,NumLags))
beta    <- param$beta
Sigma   <- param$Sigma
param
beta
Phi     <- Beta_to_Phi(Phi0,m,p)
Phi
Phi     <- Beta_to_Phi(Phi0,m,p)
Phi     <- Beta_to_Phi(beta,m,p)
devtools::load_all(".")
devtools::load_all(".")
Phi0 <- example2()$Phi0
Sigma0 <- example2()$Sigma0
m <- example2()$m
n <- example2()$n
p0 <- example2()$p0
NumLags <- example2()$NumLags
data <- sample_data(Phi=Phi0,Sigma=Sigma0,p=p0,m=m,n=n,NumLags=NumLags)
param   <- (mle_VAR(data,m,p,n,NumLags))
beta    <- param$beta
Sigma   <- param$Sigma
Phi     <- Beta_to_Phi(beta,m,p)
Beta_to_Phi <- function(beta,m,p) {
Phi <- list()
order <- 1
while ( order <= p ) {
Phi[[order]] <- t(beta[(order*(m-1)+1):(order*m),1:m])
order        <- order+1
}
return(Phi)
}
Beta_to_Phi(beta,m,p)
Phi0 <- example2()$Phi0
Sigma0 <- example2()$Sigma0
m <- example2()$m
n <- example2()$n
p0 <- example2()$p0
NumLags <- example2()$NumLags
data <- sample_data(Phi=Phi0,Sigma=Sigma0,p=p0,m=m,n=n,NumLags=NumLags)
param   <- (mle_VAR(data,m,p,n,NumLags))
beta    <- param$beta
Sigma   <- param$Sigma
library('hurvichtsai')
Phi0 <- example2()$Phi0
Sigma0 <- example2()$Sigma0
m <- example2()$m
n <- example2()$n
p0 <- example2()$p0
NumLags <- example2()$NumLags
data <- sample_data(Phi=Phi0,Sigma=Sigma0,p=p0,m=m,n=n,NumLags=NumLags)
param   <- (mle_VAR(data,m,p,n,NumLags))
beta    <- param$beta
Sigma   <- param$Sigma
Phi     <- Beta_to_Phi(beta,m,p)
estimate_Delta(Phi,Sigma,Phi0,Sigma0,m,p,p0,n)
Phi
construct_H <- function(Phi,m,p,n) {
H <- matrix(0,m*n,m*n)
stacked_Phi <- matrix(NA,0,m)
for(i in n:1){
if( i == n) {
stacked_Phi <- diag(m)
} else {
if( n-i <= p ) {
stacked_Phi <- rbind(stacked_Phi,-Phi0[[n-i]])
} else {
stacked_Phi <- rbind(stacked_Phi,matrix(0,m,m))
}
}
H[((i-1)*m+1):(n*m),((i-1)*m+1):(i*m)] <- stacked_Phi
}
return(H)
}
H  <- construct_H(Phi,m,p)
H0 <- construct_H(Phi0,m,p0)
H  <- construct_H(Phi,m,p,n)
H0 <- construct_H(Phi0,m,p0,n)
delta <- n*(log(det(Sigma)))+
psych::tr((t(H)%*%kronecker(diag(n),solve(Sigma))%*%H)%*%
t(H0)%*%kronecker(diag(n),solve(Sigma0))%*%H0)
delta
colMeans(matrix(c(1,2,3,4),2,2))
